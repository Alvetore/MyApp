import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:csv/csv.dart';
import '../config.dart';

/// –ó–∞–ø–∏—Å—å –æ–¥–Ω–æ–≥–æ –∑–∞–º–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Measurements
class MeasurementRecord {
  final String submittedBy;
  final String device;
  final String steamId;
  final String settingsProfile;
  final double fps;
  final String comment;

  MeasurementRecord({
    required this.submittedBy,
    required this.device,
    required this.steamId,
    required this.settingsProfile,
    required this.fps,
    required this.comment,
  });
}

class SheetService {
  // CSV‚Äê—Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–∏—Å—Ç—ã –≤ —Ç–≤–æ–µ–π Google-—Ç–∞–±–ª–∏—Ü–µ
  final _devicesUrl = devicesCsvUrl;
  final _osUrl      = osCsvUrl;
  final _profilesUrl = profilesCsvUrl;
  final _measurementsUrl = measurementsCsvUrl;

  /// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥: –∑–∞–≥—Ä—É–∂–∞–µ—Ç CSV –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
  Future<List<String>> _fetchList(String url) async {
    final res = await http.get(Uri.parse(url));
    if (res.statusCode != 200) {
      throw Exception('Failed to load $url (status ${res.statusCode})');
    }
    final csvString = utf8.decode(res.bodyBytes);
    final rows = const CsvToListConverter().convert(csvString);
    return rows.skip(1).map((r) => r[0].toString()).toList();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Future<List<String>> fetchDevices() => _fetchList(_devicesUrl);

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –û–°
  Future<List<String>> fetchOperatingSystems() => _fetchList(_osUrl);

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –≥—Ä–∞—Ñ–∏–∫–∏
  Future<List<String>> fetchSettingsProfiles() =>
      _fetchList(_profilesUrl);

  /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–º–µ—Ä—ã –∏ –ø–∞—Ä—Å–∏—Ç—å –≤ MeasurementRecord
  Future<List<MeasurementRecord>> fetchMeasurements() async {
    final res = await http.get(Uri.parse(_measurementsUrl));
    if (res.statusCode != 200) {
      throw Exception('Failed to load measurements (status ${res.statusCode})');
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º UTF-8
    final csvString = utf8.decode(res.bodyBytes);
    // –ü–∞—Ä—Å–∏–º –≤–µ—Å—å CSV
    final rows = const CsvToListConverter().convert(csvString);

    if (rows.isEmpty) {
      throw Exception('CSV –ø—É—Å—Ç–æ–π!');
    }

    // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏
    final header = rows.first.map((e) => e.toString()).toList();
    print('üîç CSV headers: $header');

    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    final idxSubmittedBy   = header.indexOf('SubmittedBy');
    final idxDevice        = header.indexOf('Device');
    final idxSteamId       = header.indexOf('SteamID');
    final idxProfile       = header.indexOf('SettingsProfile');
    final idxFps           = header.indexOf('FPS');
    final idxComment       = header.indexOf('Comment');

    print('üî¢ Indices ‚Üí submittedBy:$idxSubmittedBy, device:$idxDevice, steamId:$idxSteamId, profile:$idxProfile, fps:$idxFps, comment:$idxComment');

    // –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—Ä–æ—Å–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
    if ([idxSubmittedBy, idxDevice, idxSteamId, idxProfile, idxFps]
        .any((i) => i < 0)) {
      throw Exception('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–¥–Ω–∞ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ (—É–±–µ–¥–∏—Å—å, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–æ—á–Ω–æ: SubmittedBy, Device, SteamID, SettingsProfile, FPS)');
    }

    // –¢–µ–ø–µ—Ä—å –º–∞–ø–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    final data = <MeasurementRecord>[];
    for (var i = 1; i < rows.length; i++) {
      final row = rows[i];
      // –ó–∞—â–∏—Ç–∞: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä–æ—á–µ, —á–µ–º header
      if (row.length <= idxFps) continue;

      // –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —è—á–µ–π–∫–∏
      var rawFps = row[idxFps].toString();
      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, —á—Ç–æ–±—ã double.tryParse –ø–æ–Ω—è–ª –¥–µ—Å—è—Ç–∏—á–Ω—É—é —á–∞—Å—Ç—å
      rawFps = rawFps.replaceAll(',', '.');
      // –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º –≤ double
      final fpsValue = double.tryParse(rawFps) ?? 0.0;

      data.add(MeasurementRecord(
        submittedBy:   row[idxSubmittedBy].toString(),
        device:        row[idxDevice].toString(),
        steamId:       row[idxSteamId].toString(),
        settingsProfile: row[idxProfile].toString(),
        fps:           fpsValue,
        comment:       idxComment >= 0 && idxComment < row.length
            ? row[idxComment].toString()
            : '',
      ));
    }

    print('‚úÖ Parsed ${data.length} measurement records');
    return data;
  }
}
